import os, glob

configfile: "../config/config.json"

include: "rules/common.smk"
include: "rules/downloads.smk"
include: "rules/sno_literature_processing.smk"
include: "rules/sno_tgirt_seq_processing.smk"
include: "rules/sno_families.smk"
include: "rules/negative_examples.smk"
include: "rules/negative_examples_fixed_length.smk"
include: "rules/intrinsic_features.smk"
include: "rules/tune_train_test_sets.smk"
include: "rules/one_hot_encoding_and_normalization.smk"
include: "rules/existing_cd_predictors.smk"
include: "rules/simple_models.smk"
include: "rules/neural_network.smk"
include: "rules/LSTM.smk"
include: "rules/flanking_nt.smk"
include: "rules/figures.smk"


rule all:
    input:
        test = expand('data/references/positives_and_negatives/initial/initial_encoded_scaled_test_set_{fixed_length}nt.tsv', **config),
        confusion_matrix = expand('results/predictions/infernal_rfam/fixed_length_{fixed_length}nt/confusion_matrix.tsv', **config),
        test_simple_models = expand('results/predictions/{simple_models}/{fixed_length}nt/{simple_models}_test_accuracy_{fixed_length}nt.tsv', **config),
        gru_training = expand('results/predictions/gru/{fixed_length}nt/gru_trained_{fixed_length}nt_fold_10.pt', **config),
        gru_training_added_features = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_trained_{fixed_length}nt_fold_10.pt', **config),
        gru_training_added_features_wo_seq = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_trained_{fixed_length}nt_fold_10_wo_seq.pt', **config),
        gru_training_added_features_simplified = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_simplified_trained_{fixed_length}nt_fold_10.pt', **config),
        gru_training_added_features_simplified2 = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_simplified2_trained_{fixed_length}nt_fold_10.pt', **config),
        #df_metrics_on_test = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_test_metrics_simplifed2_{fixed_length}nt.tsv', **config),
        gru_training_added_features_half_norm_simplified = expand('results/predictions/gru/{fixed_length}nt/added_features_half_normalized/gru_simplified_trained_{fixed_length}nt_fold_10.pt', **config),
        all_fold_epochs_df_lstm = expand('results/predictions/lstm/{fixed_length}nt/lstm_training_f1_score_{fixed_length}nt_per_epoch_per_fold.tsv', **config),
        df_metrics_on_test = expand('results/predictions/lstm/{fixed_length}nt/lstm_test_metrics_{fixed_length}nt.tsv', **config),
        #lr_boundaries = expand('results/predictions/lstm/{fixed_length}nt/lstm_learning_rate_boundaries_{fixed_length}nt.tsv', **config),
        #all_fold_epochs_df_lstm_cyclic = expand('results/predictions/lstm/{fixed_length}nt/lstm_cyclic_lr_training_f1_score_{fixed_length}nt_per_epoch_per_fold.tsv', **config),
        #snoreport_predictions = expand('results/predictions/snoreport2/fixed_length_{fixed_length}nt/test_predictions.tsv', **config),
        #snoscan_predictions = expand('results/predictions/snoscan/fixed_length_{fixed_length}nt/test_predictions.tsv', **config),
        #infernal_tblout = expand('results/predictions/infernal_rfam/fixed_length_{fixed_length}nt/test_predictions.tsv', **config),
        #pseudosno_preds = expand('results/predictions/snoRNA_pseudogenes/fixed_length_{fixed_length}nt/snoreport_snoscan_infernal_snoRNA_pseudogenes_predictions.tsv', **config)
        # also do for unfixed length for HMM  # regenerate shuffle with modified shuffle id
        #normalized_test = 'data/references/positives_and_negatives/initial/initial_encoded_scaled_test_set.tsv'

rule all_downloads:
    input:
        blat_installation_file = "data/references/blat/blat_test.txt",
        genome = expand('data/references/genome_fa/{species}_genome.fa', **config),
        bed = expand('data/references/rnacentral/{species}.bed', 
                species=[sp for sp in config['species']+config['species_tgirt'] 
                        if sp not in ['ostreococcus_tauri', 'schizosaccharomyces_pombe']]),
        gallus_gallus_gff = "data/references/rnacentral/gallus_gallus_bGalGal1_GRCg7b.gff3",
        gtf = expand('data/references/gtf/{species}.gtf', species=[sp for sp in 
                        config['species']+config['species_tgirt'] if sp not in 
                        ['ostreococcus_tauri', 'schizosaccharomyces_pombe']]),
        rfam_clans = "data/references/rfam/fam_clans_families.tsv"

rule all_figures:
    input:
        density = 'results/figures/density/length_selection_positives.svg',
        dotplot = expand('results/figures/lineplot/metrics_existing_cd_predictors_{fixed_length}.svg', **config),
        pie_fp = expand('results/figures/pie/{error}_per_negative_type_existing_cd_predictors_{fixed_length}.svg', error=['FP', 'FN'], **config),
        bar_all = expand('results/figures/barplot/confusion_values_per_species_{cd_predictors}_{fixed_length}.svg', **config),
        box_score_density = expand('results/figures/density/box_score_positives_negatives_{fixed_length}nt.svg', **config),
        density_stem_length = expand('results/figures/density/terminal_stem_length_distributions_positives_{fixed_length}nt.svg', **config),
        density_structure_stability = expand('results/figures/density/structure_stability_positives_negatives_{fixed_length}nt.svg', **config),
        density_terminal_stem_stability = expand('results/figures/density/terminal_stem_stability_positives_negatives_{fixed_length}nt.svg', **config),
        #learning_curve = expand('results/figures/lineplot/gru/{fixed_length}nt/added_features/gru_training_f1_score_simplified2_{fixed_length}nt_avg_across_fold.svg', **config),
        learning_curve_half_norm = expand('results/figures/lineplot/gru/{fixed_length}nt/added_features_half_normalized/gru_training_f1_score_simplified_{fixed_length}nt_avg_across_fold.svg', **config)

rule test:
    input:
        df_metrics_on_test = expand('results/predictions/gru/{fixed_length}nt/added_features/gru_test_metrics_simplifed2_{fixed_length}nt.tsv', **config)


